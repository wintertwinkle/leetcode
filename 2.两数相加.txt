两数相加：

    描述：
      给定两个非空链表来代表两个非负整数，位数按照逆序方式存储，它们的每个节点只存储单个数字。将这两数相加会返回一个新的链表。
      你可以假设除了数字 0 之外，这两个数字都不会以零开头。

    示例：
      input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
      ouput: 7 -> 0 -> 8
      explanation: 342 + 465 = 807.

/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers = function(l1, l2) {
    function nodeToNumber(node){
        var number = 0,
            level = 1;
        if(!node.next === null){
            return node.val;
        }else{
            while(node.next !== null){
                number = number + level * node.val;
                node = node.next;
                level = level * 10;
            }
            return number;
        }
    }
    function numberToNode(number){
        number = number.toString().split("").map(function(item){
            return parseInt(item);
        }).reverse();
        var nodeList = [];
        for(var i = 0; i < number.length; i++){
            var value = number[i];
            var node = new ListNode(value);
            nodeList.push(node);
        }
        for( var j = 0; j < nodeList.Length; j++){
            if(j === nodeList.lenght - 1) return;
            else{
                nodeList[j].next = nodeList[j + 1];
            }
        }
        var final = nodeList.map(function(item){
            return item.val
        })
        return final;
    }
    var number1 = nodeToNumber(l1);
    var number2 = nodeToNumber(l2);
    return numberToNode(number1 + number2);
};


// 进位算法
ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    ListNode tmp = null;
    ListNode result = null;

    int carry = 0;
    while (l1 != null || l2 != null || carry != 0) {
        int sum = (l1 == null ? 0 : l1.val) + (l2 == null ? 0 : l2.val) + carry;
        carry = sum / 10;

        ListNode node = new ListNode(sum % 10);
        if (tmp == null) {
            tmp = node;
            result = tmp;
        } else {
            tmp.next = node;
            tmp = tmp.next;
        }

        l1 = l1 == null ? null : l1.next;
        l2 = l2 == null ? null : l2.next;
    }

    return result;
}

public class ListNode {
    int val;
    ListNode next;

    ListNode(int x) {
        val = x;
    }
}